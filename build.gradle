
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72" apply false
    id "org.jetbrains.kotlin.kapt" version "1.3.72" apply false
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72" apply false
    id "com.github.johnrengelman.shadow" version "6.0.0" apply false

}

version "0.1"
group "micronaut.aws"

configurations {
    // for dependencies that are needed for development only
    developmentOnly
    childJars
}

repositories {
    mavenCentral()
    jcenter()
}

allprojects {
//    apply plugin: 'groovy'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: "org.jetbrains.kotlin.kapt"
    apply plugin: "org.jetbrains.kotlin.plugin.allopen"
    apply plugin: "com.github.johnrengelman.shadow"


    repositories {
        mavenCentral()
        jcenter()
    }

    test {
        useJUnitPlatform()
    }

    kapt {
        arguments {
            arg("micronaut.processing.incremental", true)
            arg("micronaut.processing.annotations", "com.iamninad.*")
            arg("micronaut.processing.group", "com.iamninad")
            arg("micronaut.processing.module", "micronaut-aws")
            arg("micronaut.openapi.views.spec", "redoc.enabled=true,rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop")
        }
    }


    allOpen {
        annotation("io.micronaut.aop.Around")
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            //Will retain parameter names for Java reflection
            javaParameters = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            javaParameters = true
        }
    }

    dependencies {
        kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
        kapt("io.micronaut:micronaut-inject-java")
        kapt("io.micronaut:micronaut-validation")
        kapt("io.micronaut.configuration:micronaut-openapi")
        implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
        implementation("io.micronaut:micronaut-inject")
        implementation("io.micronaut:micronaut-validation")
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
        implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
        implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
        implementation("io.micronaut:micronaut-runtime")
        implementation("javax.annotation:javax.annotation-api")
        implementation("io.micronaut:micronaut-http-server-netty")
        implementation("io.micronaut:micronaut-http-client")
        implementation("io.micronaut:micronaut-tracing")
        implementation("io.swagger.core.v3:swagger-annotations")
        implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
        implementation("org.apache.logging.log4j:log4j-core:2.12.1")
        runtimeOnly("org.apache.logging.log4j:log4j-api:2.12.1")
        runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.12.1")
        runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
        kaptTest(platform("io.micronaut:micronaut-bom:$micronautVersion"))
        kaptTest("io.micronaut:micronaut-inject-java")
        testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
        testImplementation("io.micronaut.test:micronaut-test-kotlintest")
        testImplementation("io.mockk:mockk:1.9.3")
        testImplementation("io.kotlintest:kotlintest-runner-junit5:3.3.2")
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

}

tasks.getByName("clean") {
    delete "${rootDir}/dist"
}

test.classpath += configurations.developmentOnly

configure(subprojects.findAll { it.name == 'api'}) {
}
//build.finalizedBy(shadowJar)

