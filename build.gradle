import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer

plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "jp.classmethod.aws.lambda" version "0.39"
    id "groovy"
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'maven'
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "org.jetbrains.kotlin.kapt" version "1.3.50"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.50"
    id "application"
}


version "0.1"
group "micronaut.aws"


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://jcenter.bintray.com" }
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

configure(subprojects.findAll { it.name == 'api' || it.name == 'core' }) {

    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: "org.jetbrains.kotlin.kapt"
    apply plugin: "org.jetbrains.kotlin.plugin.allopen"

    dependencies {
        implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
        implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
        implementation "io.micronaut:micronaut-runtime"
        implementation "javax.annotation:javax.annotation-api"

        kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
        kapt "io.micronaut:micronaut-inject-java"
        kapt "io.micronaut:micronaut-validation"
//        runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"
        runtime "ch.qos.logback:logback-classic:1.2.3"

        kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
        testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        kaptTest "io.micronaut:micronaut-inject-java"
        testImplementation("org.spockframework:spock-core") {
            exclude group: "org.codehaus.groovy", module: "groovy-all"
        }
        testImplementation "io.micronaut:micronaut-inject-groovy"
        testImplementation "io.micronaut.test:micronaut-test-spock"
        testImplementation "io.micronaut.test:micronaut-test-junit5"
        testImplementation "io.micronaut.test:micronaut-test-kotlintest"
        testImplementation "io.mockk:mockk:1.9.3"
        testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
    }

    test {
        useJUnitPlatform()
    }


    allOpen {
        annotation("io.micronaut.aop.Around")
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            //Will retain parameter names for Java reflection
            javaParameters = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            javaParameters = true
        }
    }


}
test.classpath += configurations.developmentOnly

shadowJar {
    mergeServiceFiles()
    transform(Log4j2PluginsCacheFileTransformer)
}


tasks.withType(ShadowJar) {
    archiveBaseName.set("micronaut-aws")
    archiveClassifier.set("")
    archiveVersion.set("")
}


tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}
mainClassName = "io.micronaut.function.executor.FunctionApplication"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

build.finalizedBy(shadowJar)

